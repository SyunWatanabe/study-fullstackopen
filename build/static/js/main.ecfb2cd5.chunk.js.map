{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8MAYeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,KCY3B,EAfA,WAEb,OADgBI,IAAMC,IAHR,cAICC,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SC6D9BK,EAxEH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAoBhBC,qBAAU,WACRC,IAAqBhB,MAAK,SAACiB,GACzBP,EAASO,QAEV,IAEH,IAmBMC,EAAcL,EAAUJ,EAAQA,EAAMU,QAAO,SAAC3B,GAAD,OAAUA,EAAKG,aAElE,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMiB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGK,EAAYE,KAAI,SAAC5B,EAAM6B,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL7B,KAAMA,EACNC,iBAAkB,kBAvDD,SAACY,GAC1B,IAAMb,EAAOiB,EAAMc,MAAK,SAACC,GAAD,OAAOA,EAAEnB,KAAOA,KAClCoB,EAAW,eAAQjC,EAAR,CAAcG,WAAYH,EAAKG,YAEhDqB,EACUX,EAAIoB,GACXzB,MAAK,SAAC0B,GACLhB,EAASD,EAAMW,KAAI,SAAC5B,GAAD,OAAWA,EAAKa,KAAOA,EAAKb,EAAOkC,SAEvDC,OAAM,SAACC,GACNC,MAAM,aAAD,OAAcrC,EAAKI,QAAnB,sCACLc,EAASD,EAAMU,QAAO,SAACK,GAAD,OAAOA,EAAEnB,KAAOA,SA4CVyB,CAAmBtC,EAAKa,WAItD,0BAAM0B,SAtCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBtC,QAASe,EACTwB,MAAM,IAAIC,MAAOC,cACjB1C,UAAW2C,KAAKC,SAAW,GAC3BlC,GAAII,EAAM+B,OAAS,GAGrBxB,EAAmBkB,GAAYlC,MAAK,SAAC0B,GACnChB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,SA4BT,2BAAO8B,MAAO/B,EAASgC,SAxBJ,SAACX,GACxBpB,EAAWoB,EAAMY,OAAOF,UAwBpB,4BAAQG,KAAK,UAAb,WClERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ecfb2cd5.chunk.js","sourcesContent":["import React , {content} from \"react\";\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\n\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>NOTES</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}